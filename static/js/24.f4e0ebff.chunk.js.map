{"version":3,"sources":["@core/components/input-password-toggle/index.js","views/pages/authentication/ResetPasswordCover.js"],"names":["InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","className","htmlFor","placeholder","iconSize","inputClassName","invalid","rest","useState","inputVisibility","setInputVisibility","for","classnames","type","id","onClick","size","renderIcon","defaultProps","ResetPasswordCover","illustration","useSkin","skin","source","require","default","to","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","md","tag","onSubmit","autoFocus","color","block"],"mappings":"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","file":"static/js/24.f4e0ebff.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Custom Hooks\r\nimport { useSkin } from '@hooks/useSkin'\r\n\r\n// ** Icons Imports\r\nimport { ChevronLeft } from 'react-feather'\r\n\r\n// ** Custom Components\r\nimport InputPassword from '@components/input-password-toggle'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col, CardTitle, CardText, Form, Label, Button } from 'reactstrap'\r\n\r\n// ** Styles\r\nimport '@styles/react/pages/page-authentication.scss'\r\n\r\nconst ResetPasswordCover = () => {\r\n  // ** Hooks\r\n  const { skin } = useSkin()\r\n\r\n  const illustration = skin === 'dark' ? 'reset-password-v2-dark.svg' : 'reset-password-v2.svg',\r\n    source = require(`@src/assets/images/pages/${illustration}`).default\r\n\r\n  return (\r\n    <div className='auth-wrapper auth-cover'>\r\n      <Row className='auth-inner m-0'>\r\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\r\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\r\n            <defs>\r\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\r\n                <stop stopColor='#000000' offset='0%'></stop>\r\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\r\n              </linearGradient>\r\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\r\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\r\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\r\n              </linearGradient>\r\n            </defs>\r\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\r\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\r\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\r\n                  <path\r\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\r\n                    id='Path'\r\n                    className='text-primary'\r\n                    style={{ fill: 'currentColor' }}\r\n                  ></path>\r\n                  <path\r\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\r\n                    id='Path'\r\n                    fill='url(#linearGradient-1)'\r\n                    opacity='0.2'\r\n                  ></path>\r\n                  <polygon\r\n                    id='Path-2'\r\n                    fill='#000000'\r\n                    opacity='0.049999997'\r\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\r\n                  ></polygon>\r\n                  <polygon\r\n                    id='Path-2'\r\n                    fill='#000000'\r\n                    opacity='0.099999994'\r\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\r\n                  ></polygon>\r\n                  <polygon\r\n                    id='Path-3'\r\n                    fill='url(#linearGradient-2)'\r\n                    opacity='0.099999994'\r\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\r\n                  ></polygon>\r\n                </g>\r\n              </g>\r\n            </g>\r\n          </svg>\r\n          <h2 className='brand-text text-primary ms-1'>Vuexy</h2>\r\n        </Link>\r\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n            <img className='img-fluid' src={source} alt='Login Cover' />\r\n          </div>\r\n        </Col>\r\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\r\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n            <CardTitle tag='h2' className='fw-bold mb-1'>\r\n              Reset Password 🔒\r\n            </CardTitle>\r\n            <CardText className='mb-2'>Your new password must be different from previously used passwords</CardText>\r\n            <Form className='auth-reset-password-form mt-2' onSubmit={e => e.preventDefault()}>\r\n              <div className='mb-1'>\r\n                <Label className='form-label' for='new-password'>\r\n                  New Password\r\n                </Label>\r\n                <InputPassword className='input-group-merge' id='new-password' autoFocus />\r\n              </div>\r\n              <div className='mb-1'>\r\n                <Label className='form-label' for='confirm-password'>\r\n                  Confirm Password\r\n                </Label>\r\n                <InputPassword className='input-group-merge' id='confirm-password' />\r\n              </div>\r\n              <Button color='primary' block>\r\n                Set New Password\r\n              </Button>\r\n            </Form>\r\n            <p className='text-center mt-2'>\r\n              <Link to='/pages/login-cover'>\r\n                <ChevronLeft className='rotate-rtl me-25' size={14} />\r\n                <span className='align-middle'>Back to login</span>\r\n              </Link>\r\n            </p>\r\n          </Col>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResetPasswordCover\r\n"],"sourceRoot":""}